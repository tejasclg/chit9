//SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.7 <0.9.0;


contract StudentData {
    struct Student {
        uint256 id;
        string name;
        uint256 marks;
    }

    Student[] public students;

    function addStudent(uint256 _id, string memory _name, uint256 _marks) external {
        Student memory newStudent = Student(_id, _name, _marks);
        students.push(newStudent);
    }

    function getStudent(uint256 index) external view returns (uint256, string memory, uint256) {
        require(index < students.length, "Student index out of bounds");
        Student memory student = students[index];
        return (student.id, student.name, student.marks);
    }

   
    }

   
// this for fall back code 
// SPDX-License-Identifier: MIT

pragma solidity >=0.8.3;

contract FallBack{
    event Log(string name,address sender,uint value, bytes data);

    fallback() external payable {
        emit Log ("fallback recive ",msg.sender,msg.value,msg.data);
     }
     receive() external payable {
        emit Log ("recive fun",msg.sender,msg.value,"");
      }
}
